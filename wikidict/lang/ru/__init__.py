"""Russian language."""

import re

from ...user_functions import flatten, unique

# Float number separator
float_separator = ","

# Thousands separator
thousands_separator = " "

# Markers for sections that contain interesting text to analyse.
section_level = 1
section_sublevels = (3, 4)
head_sections = "{{-ru-}}"
etyl_section = ("—ç—Ç–∏–º–æ–ª–æ–≥–∏—è",)
sections = (
    *etyl_section,
    "–∑–Ω–∞—á–µ–Ω–∏–µ",
    "{{–∑–Ω–∞—á–µ–Ω–∏–µ}}",
    "—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞",
    "{{—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞}}",
    "–º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞",
    "–∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –≥–ª–∞–≥–æ–ª",  # for verbs with aux
    "–≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≥–ª–∞–≥–æ–ª–∞ –∏–ª–∏ —Å–≤—è–∑–∫–∏",  # for verbs with aux
)

# Variants
variant_titles = ("–∑–Ω–∞—á–µ–Ω–∏–µ",)
variant_templates = ("{{–ø—Ä–∏—á.",)

# Some definitions are not good to keep (plural, gender, ... )
definitions_to_ignore = (*[variant.lstrip("{") for variant in variant_templates],)

# Some definitions are not good to keep (plural, gender, ... )
templates_ignored = ("??", "gb", "etym-lang", "L", "Lacuna", "l", "lacuna", "unfinished", "—Å–µ–º–∞–Ω—Ç–∏–∫–∞", "–ø—Ä–∏–º–µ—Ä")

# Templates more complex to manage.
templates_multi = {
    # {{"|–°—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –®–µ—Ä–µ–º–µ—Ç—É}}
    '"': 'f"‚Äû{parts[1]}‚Äú"',
    # {{===|–ê—Ç–ª–∞–Ω—Ç}}
    "===": 'f"—Ç–æ –∂–µ, —á—Ç–æ {parts[1]}"',
    # {{wikiref|—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –≤–∏–¥}}
    "wikiref": "parts[-1]",
    # {{–∫—Å|–£–Ω–±–µ–≥–∞—É–Ω, —Å. 44}}
    "–∫—Å": 'f"[{parts[1]}]"',
    # {{t:=|–ø–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è}} ‚Üí  {{_t_|–ø–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è}} (converted in `render.adjust_wikicode()`)
    "_t_": 'f"—Ç–æ –∂–µ, —á—Ç–æ {parts[1]}"',
    "—Å—Ç—Ä–∞–¥.": "italic('—Å—Ç—Ä–∞–¥.') + ' –∫' + ((' ' + parts[1]) if len(parts) > 1 else '')",
    # {{–º–∞—Ä—Ä|–∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è}}
    "–º–∞—Ä—Ä": 'f"‚Äò{parts[1]}‚Äô"',
    # {{—ç—Ç–∏–º-2|{{lang|en|AI|–ò–ò}}|{{lang|en|artificial intelligence|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç}}|[[—Ç—Ä–µ–Ω–µ—Ä]]|{{lang|en|trainer|—Ç—Ä–µ–Ω–µ—Ä}}}}
    "—ç—Ç–∏–º-2": "f\"{parts[1]} + {parts[3] if len(parts) > 3 else ''}\"",
}

# Templates that will be completed/replaced using custom text.
templates_other = {
    "?": "<small>?</small>",
    "-": "‚Äî",
    "--": "‚Äî",
    "–§": "<small>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä—è –ú. –§–∞—Å–º–µ—Ä–∞</small>",
    "–ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥": "<b>–ó–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ.</b> –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.",
    "—Å–æ–≤–µ—Ç—Å–∫.": "<i>—Å–æ–≤–µ—Ç—Å–∫.</i>",
}


# Release content on GitHub
# https://github.com/BoboTiG/ebook-reader-dict/releases/tag/ru
release_description = """\
### üåü –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª—Å—è, –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞; [–Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å](https://github.com/BoboTiG/ebook-reader-dict/issues/2339), —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ. üåü

<br/>


–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ : {words_count}
–≠–∫—Å–ø–æ—Ä—Ç –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è : {dump_date}

–ü–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ :
{download_links_full}

–í–µ—Ä—Å–∏–∏ –±–µ–∑ —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ :
{download_links_noetym}

<sub>–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ {creation_date}</sub>
"""

# Dictionary name that will be printed below each definition
wiktionary = "–í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—å (…î) {year}"


def find_genders(code: str, locale: str) -> list[str]:
    """
    >>> find_genders("", "ru")
    []
    >>> find_genders("{{—Å—É—â ru f ina 5a|–æ—Å–Ω–æ–≤–∞=—Å—Ç—Ä–∞–Ω–∏ÃÅ—Ü|—Å–ª–æ–≥–∏={{–ø–æ-—Å–ª–æ–≥–∞–º|—Å—Ç—Ä–∞|–Ω–∏ÃÅ|—Ü–∞}}}}", "ru")
    ['f']
    """
    # https://ru.wiktionary.org/wiki/%D0%A8%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD:%D1%81%D1%83%D1%89-ru
    pattern: re.Pattern[str] = re.compile(rf"(?:\{{—Å—É—â.{locale}.)([fmn–º–∂—Å])|(?:\{{—Å—É—â.{locale}.*\|)([fmn–º–∂—Å])")
    return unique(flatten(pattern.findall(code)))


def find_pronunciations(code: str, locale: str) -> list[str]:
    """
    >>> find_pronunciations("", "ru")
    []
    >>> # Expected behaviour after #1376: ['[str…êÀàn ≤itÕ°s…ô]']
    >>> find_pronunciations("{{transcriptions-ru|—Å—Ç—Ä–∞–Ω–∏ÃÅ—Ü–∞|—Å—Ç—Ä–∞–Ω–∏ÃÅ—Ü—ã|Ru-—Å—Ç—Ä–∞–Ω–∏—Ü–∞.ogg}}", "ru")
    ['—Å—Ç—Ä–∞–Ω–∏']
    """
    pattern = re.compile(rf"(?:transcriptions-{locale}.)(\w*)")
    return unique(pattern.findall(code))


def last_template_handler(
    template: tuple[str, ...],
    locale: str,
    *,
    word: str = "",
    missed_templates: list[tuple[str, str]] | None = None,
) -> str:
    """
    Will be called in utils.py::transform() when all template handlers were not used.

        >>> last_template_handler(["en"], "ru")
        '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'

        >>> last_template_handler(["–≤—ã–¥–µ–ª", "foo"], "ru")
        'foo'

        >>> last_template_handler(["–∞–±–±—Ä.", "ru"], "ru")
        '<i>—Å–æ–∫—Ä.</i>'
        >>> last_template_handler(["–∞–±–±—Ä.", "ru", "–°–≤–æ–±–æ–¥–Ω–∞—è –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è", "–±–µ–∑ —Å—Å—ã–ª–∫–∏=1"], "ru")
        '<i>—Å–æ–∫—Ä.</i> –æ—Ç <i>–°–≤–æ–±–æ–¥–Ω–∞—è –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è</i>'
        >>> last_template_handler(["–∞–±–±—Ä.", "ru", "–°–≤–æ–±–æ–¥–Ω–∞—è –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è", "–±–µ–∑ —Å—Å—ã–ª–∫–∏=1", ""], "ru")
        '<i>—Å–æ–∫—Ä.</i> –æ—Ç <i>–°–≤–æ–±–æ–¥–Ω–∞—è –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è</i>'

        >>> last_template_handler(["—Ä–µ–≥."], "ru")
        '<i>—Ä–µ–≥.</i>'
        >>> last_template_handler(["—Ä–µ–≥.", "–õ–∞—Ç–≤–∏—è"], "ru")
        '<i>—Ä–µ–≥. (–õ–∞—Ç–≤–∏—è)</i>'

        >>> last_template_handler(["—Å–≤–æ–π—Å—Ç–≤–æ", "–∞–±–µ–ª–µ–≤"], "ru")
        '—Å–≤–æ–π—Å—Ç–≤–æ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ <i>–∞–±–µ–ª–µ–≤</i>'
        >>> last_template_handler(["—Å–≤–æ–π—Å—Ç–≤–æ", "–ø–æ–≥–Ω—É—Ç—ã–π", "—Å–æ—Å—Ç–æ—è–Ω–∏–µ=1"], "ru")
        '—Å–≤–æ–π—Å—Ç–≤–æ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ <i>–ø–æ–≥–Ω—É—Ç—ã–π</i>'

        >>> last_template_handler(["–Ω–∞—Ä–µ—á.", "–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π"], "ru")
        '–Ω–∞—Ä–µ—á–∏–µ –∫ <i>–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π</i>'
        >>> last_template_handler(["–Ω–∞—Ä–µ—á–∏–µ", "–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π", "–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —á–µ–º-–ª–∏–±–æ"], "ru")
        '–Ω–∞—Ä–µ—á–∏–µ –∫ <i>–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π</i>; –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —á–µ–º-–ª–∏–±–æ'

        # Labels
        >>> last_template_handler(["–∑–æ–æ–ª.", "ru"], "ru")
        '<i>–∑–æ–æ–ª.</i>'
        >>> last_template_handler(["—Å–ª–µ–Ω–≥", "ru"], "ru")
        '<i>—Å–ª–µ–Ω–≥</i>'
        >>> last_template_handler(["–≥–∏–ø–æ–∫–æ—Ä.", "ru", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"], "ru")
        '<i>–≥–∏–ø–æ–∫–æ—Ä.</i> –∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä'
        >>> last_template_handler(["—ç—Ä—Ä–∞—Ç.", "ru", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"], "ru")
        '<i>—ç—Ä—Ä–∞—Ç.</i> –æ—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä'
        >>> last_template_handler(["—É–º–ª–∞—Å–∫."], "ru")
        '<i>—É–º–µ–Ω—å—à.-–ª–∞—Å–∫.</i>'

        >>> last_template_handler(["–£–Ω–±–µ–≥–∞—É–Ω"], "ru")
        '<i>–£–Ω–±–µ–≥–∞—É–Ω –ë.-–û.</i> –†—É—Å—Å–∫–∏–µ —Ñ–∞–º–∏–ª–∏–∏. ‚Äî –ú. : –ü—Ä–æ–≥—Ä–µ—Å—Å, 1989. ‚Äî 443 —Å. ‚Äî ISBN 5-01-001045-3.'
        >>> last_template_handler(["–£–Ω–±–µ–≥–∞—É–Ω", "—Å–æ–∫—Ä=1"], "ru")
        '–£–Ω–±–µ–≥–∞—É–Ω'

        #
        # Variants
        #
        >>> last_template_handler(["–ø—Ä–∏—á.", "–∑—ã–±–∏—Ç—å"], "ru")
        '–∑—ã–±–∏—Ç—å'
        >>> last_template_handler(["–ø—Ä–∏—á.", "–Ω–µ=1", "–∑—ã–±–∏—Ç—å", "–Ω–∞—Å—Ç", "—Å—Ç—Ä–∞–¥"], "ru")
        '–∑—ã–±–∏—Ç—å'
    """
    from ...user_functions import extract_keywords_from, italic
    from .. import defaults
    from .labels import labels
    from .langs import langs
    from .template_handlers import lookup_template, render_template

    tpl, *parts = template
    data = extract_keywords_from(parts)

    #
    # Variants
    #
    if tpl == "–ø—Ä–∏—á.":
        if (variant := parts[0]) == "<small>?</small>":
            variant = ""
        return variant

    if lookup_template(tpl):
        return render_template(word, template)

    if tpl == "—Ä–µ–≥.":
        text = tpl
        if parts:
            text += f" ({parts[0]})"
        return italic(text)

    if tpl == "–∞–±–±—Ä.":
        text = italic("—Å–æ–∫—Ä.")
        if len(parts) > 1:
            text += f" –æ—Ç {italic(parts[1])}"
        return text

    if tpl == "–≤—ã–¥–µ–ª":
        return parts[0]

    if tpl in {"–Ω–∞—Ä–µ—á–∏–µ", "–Ω–∞—Ä–µ—á."}:
        text = f"–Ω–∞—Ä–µ—á–∏–µ –∫ {italic(parts[0])}"
        if len(parts) > 1:
            text += f"; {parts[1]}"
        return text

    if tpl == "—Å–≤–æ–π—Å—Ç–≤–æ":
        text = tpl
        if data["—Å–æ—Å—Ç–æ—è–Ω–∏–µ"] == "1":
            text += " –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        return f"{text} –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ {italic(parts[0])}"

    if tpl == "–£–Ω–±–µ–≥–∞—É–Ω":
        if data["—Å–æ–∫—Ä"] == "1":
            return tpl
        return f"{italic(tpl + ' –ë.-–û.')} –†—É—Å—Å–∫–∏–µ —Ñ–∞–º–∏–ª–∏–∏. ‚Äî –ú. : –ü—Ä–æ–≥—Ä–µ—Å—Å, 1989. ‚Äî 443 —Å. ‚Äî ISBN 5-01-001045-3."

    if label := labels.get(tpl):
        if tpl == "—É–º–ª–∞—Å–∫.":
            label = "—É–º–µ–Ω—å—à.-–ª–∞—Å–∫."
        text = italic(label)
        if len(parts) > 1:
            text += f" {'–æ—Ç' if tpl == '—ç—Ä—Ä–∞—Ç.' else '–∫'} {parts[-1]}"
        return text

    if lang := langs.get(tpl):
        return lang

    return defaults.last_template_handler(template, locale, word=word, missed_templates=missed_templates)
