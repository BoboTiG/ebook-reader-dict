"""Portuguese language."""

import re

from ...user_functions import uniq
from .escopos import escopos

# Float number separator
float_separator = ","

# Thousads separator
thousands_separator = " "

# Markers for sections that contain interesting text to analyse.
section_patterns = ("#", r"\*", ":#")
section_level = 1
section_sublevels = (2,)
head_sections = ("{{-pt-}}", "{{-mult-}}")
etyl_section = ("{{etimologia|pt}}", "{{etimologia|mult}}", "etimologia")
_sections = [
    "abrevia√ß√£o",
    "abreviatura",
    "acr√¥nimo",
    "acr√≥nimo",
    "adjetivo",
    "adv√©rbio",
    "afixo",
    "antepositivo",
    "artigo",
    "caractere",
    "conjun√ß√£o",
    "contra√ß√£o",
    "elemento de composi√ß√£o",
    "express√£o",
    "express√£o verbal",
    "express√µes",
    "forma adjetivo",
    "forma de adjetivo",
    "forma de adv√©rbio",
    "forma de express√£o verbal",
    "forma de locu√ß√£o adjetiva",
    "forma de locu√ß√£o adverbial",
    "forma de locu√ß√£o pronominal",
    "forma de locu√ß√£o substantiva",
    "forma de pronome",
    "forma de sigla",
    "forma de substantiva",
    "forma de substantivo",
    "forma de sufixo",
    "forma de verbo",
    "forma verbal",
    "frase",
    "infixo",
    "interjei√ß√£o",
    "interfixo",
    "letra",
    "locu√ß√£o",
    "locu√ß√£o adjetiva",
    "locu√ß√£o adverbial",
    "locu√ß√†o adverbial",
    "locu√ß√£o conjuntiva",
    "locu√ß√£o interjetiva",
    "locu√ß√£o prepositiva",
    "locu√ß√£o substantiva",
    "locu√ß√£o verbal",
    "numeral",
    "onomatopeia",
    "pepb|",
    "plural",
    "pospositivo",
    "prefixo",
    "preposi√ß√£o",
    "pronome",
    "prov√©rbio",
    "sigla",
    "s√≠mbolo",
    "subfijo",
    "substantivo",
    "sufixo",
    "top√≥nimo",
    "verbal",
    "verbo",
]
_sections.extend(f"{{{{{s}" for s in _sections.copy())
_sections.extend(etyl_section)
sections = tuple(_sections)

# Some definitions are not good to keep (plural, gender, ... )
definitions_to_ignore = ("pe√ßodef",)

# Templates to ignore: the text will be deleted.
templates_ignored = (
    "?.",
    "cont",
    "FDSP",
    "liga√ß√£oPalavraWdic",
    "OESP",
    "#seigual",
    "t",
)

# Templates that will be completed/replaced using italic style.
templates_italic = {**escopos}

# Templates more complex to manage.
templates_multi = {
    # {{AFI|/k/|pt}}
    "AFI": "parts[1]",
    # {{barra de cor|#0000FF|#0000FF}}
    "barra de cor": "color(parts[-1])",
    # {{c}}
    "c": "italic('g√©nero comum')",
    # {{c2gb}}
    "c2gb": "italic('comum aos dois g√™neros no Brasil')",
    # {{confundir|anacruse}}
    "confundir": "f'{italic(f\"N√£o confundir com {strong(parts[-1])}\")}'",
    # {{data√ß√£o|5/4/1810}}
    "data√ß√£o": "f'[{italic(\"Data√ß√£o\")}: {parts[-1]}]'",
    # {{escopo2|Inform√°tica}}
    # {{escopo2|Brasil|governo}}
    "escopo2": "term(parts[1])",
    # {{escopoCat|N√°utica|pt}}
    "escopoCat": "term(lookup_italic(parts[1], 'pt'))",
    # {{escopoCatLang|Verbo auxiliar|pt}}
    "escopoCatLang": "term(lookup_italic(parts[1], 'pt'))",
    # {{escopoClasseMorfo|varia√ß√£o}}
    "escopoClasseMorfo": "small('(' + parts[-1] + ')')",
    # {{escopoObs.|L√™-se <u>formato dois A</u>.}}
    "escopoObs.": "f'{strong(\"Observa√ß√£o\")}: {parts[-1]}'",
    # {{escopoUso|Portugal|pt}}
    "escopoUso": "term(lookup_italic(parts[1], 'pt'))",
    # {{f}}
    "f": "italic('feminino')",
    # {{fb}}
    "fb": "italic('feminino no Brasil')",
    # {{fbmfdemais}}
    "fbmfdemais": "italic('feminino no Brasil, masculino ou feminino em Portugal e demais pa√≠ses')",
    # {{fem|heliost√°tico}}
    "fem": 'f"feminino de {strong(parts[1])}"',
    # {{fl|la|occ≈≠lo}}
    "fl": "parts[-1]",
    # {{fp}}
    "fp": "italic('feminino plural')",
    # {{grafiaPtbr|autocr√≥mico}}
    "grafiaPtbr": "f'{italic(f\"Grafia usada no Brasil. Nos restantes pa√≠ses da CPLP escreve-se {strong(parts[-1])}\")}'",
    # {{grafiaPtpt|a}}
    "grafiaPtpt": "f'{italic(f\"Grafia usada em todos os pa√≠ses falantes de l√≠ngua portuguesa exceto no Brasil, onde se escreve {strong(parts[-1])}\")}'",
    # {{l|pt|usar|usar}}",
    "l": "parts[-1]",
    # {{l.o.|jur√≠dico|jur√≠dica}}
    "l.o.": "parts[-1]",
    # {{l.s.|uso}}
    # {{l.s.|uso|Verbo}}
    "l.s.": "parts[1]",
    # {{lig|is|hlj√≥√∞}}
    "lig": "parts[3 if len(parts) >= 4 else 2]",
    # {{link idioma|carro}}
    # {{link idioma|carro|es|veh√≠culo}}
    "link idioma": "parts[3 if len(parts) == 4 else 1]",
    # {{link opcional|arapyt√£≈ãa|tpn}}
    "link opcional": "parts[1]",
    # {{link preto|ciconiforme}}
    "link preto": "parts[-1]",
    # {{ll|publicar}}
    "ll": "parts[3 if len(parts) == 4 else 1]",
    # {m|ar|ÿ¥Ÿäÿ¥ÿ©|tr=≈°ƒ´≈°a}}
    "m": "italic('masculino')",
    # {{mbfp}}
    "mbfp": "italic('masculino no Brasil, feminino em Portugal')",
    # {{mbmfp}}
    "mbmfp": "italic('masculino no Brasil, masculino e feminino em Portugal')",
    # {{mf}}
    "mf": "italic('masculino ou feminino')",
    # {{mfbfdemais}}
    "mfbfdemais": "italic('masculino ou feminino no Brasil, feminino em Portugal e demais pa√≠ses')",
    # {{mp}}
    "mp": "italic('masculino plural')",
    # {{mpfb}}
    "mpfb": "italic('masculino em Portugal, feminino no Brasil')",
    # {{mpmfb}}
    "mpmfb": "italic('masculino em Portugal, masculino e feminino no Brasil')",
    # {{mpteu}}
    "mpteu": "italic('masculino em Portugal')",
    # {{mq|palavra}}
    # {{mq|word|en}}
    "mq": 'f"o mesmo que {strong(parts[1]) if len(parts) == 2 else italic(parts[1])}"',
    # {{n}}
    "n": "italic('neutro')",
    # {{PE|cu}}
    "PE": "f\"{parts[-1]} {superscript('(portugu√™s de Portugal)')}\"",
    # {{p/a}}
    "p/a": "italic('plural apenas')",
    # {{polit√¥nico|Œ∫œÅŒ±œÑŒØŒ±}}
    "polit√¥nico": "parts[-1]",
    # {{pr}}
    "pr": "italic('pr√≥prio')",
    # {{r|la|basium|basƒ≠um}}
    "r": "parts[-1]",
    # {{r.l|la|utor|≈´tor}}
    "r.l": "parts[-1]",
    # {{s/p}}
    "s/p": "italic('sem plural')",
    # {{signBr|a}}
    "signBr": "f'{italic(f\"Este significado √© de uso comum no Brasil. Um semelhante pode ser encontrado em: {strong(parts[-1])}\")}'",
    # {{signPt|a}}
    "signPt": "f'{italic(f\"Este significado √© de uso comum em Portugal. Um semelhante pode ser encontrado em: {strong(parts[-1])}\")}'",
    # {{varort|tenu-|pt}}
    "varort": 'f"variante ortogr√°fica de {strong(parts[1])}"',
}

# Templates that will be completed/replaced using custom style.
templates_other = {
    "-varort-": "Formas alternativas",
    "escopoGrafiaPort": "(grafia port.)",
    "escopoGrafiaBrasil": "(grafia bras.)",
}

# Release content on GitHub
# https://github.com/BoboTiG/ebook-reader-dict/releases/tag/pt
release_description = """\
### üåü Para poder ser atualizado regularmente, este projeto precisa de apoio; [clique aqui](https://github.com/BoboTiG/ebook-reader-dict/issues/2339) para fazer um donativo. üåü

<br/>


As palavras contam: {words_count}
Exporta√ß√£o Wikcion√°rio: {dump_date}

Full version:
{download_links_full}

Etymology-free version:
{download_links_noetym}

<sub>Actualizado em {creation_date}</sub>
"""

# Dictionary name that will be printed below each definition
wiktionary = "Wikcion√°rio (…î) {year}"


def find_genders(
    code: str,
    *,
    pattern: re.Pattern[str] = re.compile(r"{([fm]+)}"),
) -> list[str]:
    """
    >>> find_genders("")
    []
    >>> find_genders("{{ox√≠tona|ca|brum}}, {{mf}}")
    ['mf']
    >>> find_genders("'''COPOM''', {{m}}")
    ['m']
    """
    return uniq(pattern.findall(code))


def find_pronunciations(
    code: str,
    *,
    pattern: re.Pattern[str] = re.compile(r"{AFI\|(/[^/]+/)"),
) -> list[str]:
    """
    >>> find_pronunciations("")
    []
    >>> find_pronunciations("{{AFI|/p…æe.Ààno.meÃù/}}")
    ['/p…æe.Ààno.meÃù/']
    >>> find_pronunciations("{{AFI|/p…æe.Ààno.meÃù/|lang=pt}}")
    ['/p…æe.Ààno.meÃù/']
    """
    return uniq(pattern.findall(code))


def last_template_handler(template: tuple[str, ...], locale: str, *, word: str = "") -> str:
    """
    Will be call in utils.py::transform() when all template handlers were not used.

        >>> last_template_handler(["codelang", "grc"], "pt")
        'grego cl√°ssico'

        >>> last_template_handler(["etm", "la", "pt"], "pt")
        'latim'

        >>> last_template_handler(["la"], "pt")
        'Latim'

        >>> last_template_handler(["unknown", "test"], "pt")
        '<i>(Unknown)</i>'

        >>> last_template_handler(["xlatio", "it", "chimica", "f."], "pt")
        'chimica f.'
    """
    from .. import defaults
    from .codelangs import codelangs
    from .langs import langs
    from .template_handlers import lookup_template, render_template

    if lookup_template(template[0]):
        return render_template(word, template)

    tpl, *parts = template

    match tpl:
        case "codelang":
            return codelangs[parts[0]]
        case "etm":
            return langs[parts[0]].lower()
        case "xlatio":
            return f"{parts[1]} {parts[2]}"

    # This is a country in the current locale
    if lang := langs.get(tpl):
        return lang.capitalize()

    return defaults.last_template_handler(template, locale, word=word)
